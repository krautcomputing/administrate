<%#
# Show

This view is the template for the show page.
It renders the attributes of a resource,
as well as a link to its edit page.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Show][1].
  Contains methods for accessing the resource to be displayed on the page,
  as well as helpers for describing how each attribute of the resource
  should be displayed.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Show
%>

<% content_for(:title) { local_assigns.key?(:title) ? title : t("administrate.actions.show_resource", name: page.page_title) } %>

<header class="header">
  <h1 class="header__heading"><%= content_for(:title) %></h1>
  <div class="header__actions">
    <%= link_to(
      t("administrate.actions.edit"),
      [:edit, namespace, page.resource],
      class: "button"
    ) if valid_action?(:edit) %>
    <%= link_to(
      t("administrate.actions.destroy"),
      [namespace, page.resource],
      class: "button",
      method: :delete,
      data: { confirm: t("administrate.actions.confirm") }
    ) if valid_action?(:destroy) && show_action?(:edit, page.resource) %>
    <% page.resource_actions(params).each do |name, url, html_options = {}| %>
      <% html_options[:class] = html_options.fetch(:class, '').split(/\s+/).append('button').join(' ') %>
      <% unless url.is_a?(String) %>
        <% options = url.last.is_a?(Hash) ? url.pop : {} %>
        <% url = polymorphic_url(url, options) %>
      <% end %>
      <%= link_to name, url, html_options %>
    <% end %>
  </div>
</header>

<dl>
  <% page.attributes(params[:action]).each do |attribute| %>
    <dt class="attribute-label">
      <%= t("helpers.label.#{resource_name}.#{attribute.name}", default: t("activerecord.attributes.#{resource_name}.#{attribute.name}", default: attribute.name.titleize)) %>
    </dt>

    <dd class="attribute-data
               attribute-data--<%= attribute.html_class %>"
    >
      <%= render_field attribute %>
    </dd>
  <% end %>
</dl>
