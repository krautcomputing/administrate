- all_filters = Administrate::Filter.all(dashboard)
- all_filters_except_search = all_filters.reject { |filter| filter.key == :search }

#new-filter

  - if all_filters_except_search.any?
    = form_for Administrate::Filter.new do |f|
      .filter-key
        = f.select :key, options_for_select(all_filters_except_search.map { |filter| [filter.label, filter.key] }), { prompt: 'Select filter...' }
      - all_filters_except_search.each do |filter|
        .filter-values{ id: "filter-values-#{filter.key}" }
          - case filter.kind
          - when :select_one, :select_multiple
            - multiple_param = filter.kind == :select_multiple ? { multiple: true } : {} # `multiple: false` doesn't work
            = f.select :value, options_for_select(filter.values.map { |filter_value| [filter_value.label.is_a?(Proc) ? filter_value.label.call : filter_value.label, filter_value.key] }), {}, multiple_param
          - else
            - fail "Unexpected filter kind: #{filter.kind}"
      = f.submit 'Apply'

  - search_filter = [*filters, *all_filters].detect { |filter| filter.key == :search }
  - if search_filter.value.to_s.present?
    = link_to 'Clear search'.html_safe, filter_path(search_filter.key), method: :delete, class: 'button clear-search'
  = form_for search_filter, html: { class: 'new_search', id: 'new_search' } do |f|
    = f.hidden_field :key, value: 'search', id: 'search_filter_key'
    = f.text_field :value, placeholder: 'Search', id: 'search_filter_value'

- existing_filters = filters.reject { |filter| filter.key == :search }
- if existing_filters.any?
  %ul#existing-filters
    - existing_filters.each do |filter|
      %li
        == #{filter.label}: #{Array(filter.value).join(', ')}
        = link_to '&times;'.html_safe, filter_path(filter.key), method: :delete
