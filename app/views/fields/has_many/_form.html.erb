<%#
# HasMany Form Partial

This partial renders an input element for has_many relationships.
By default, the input is a collection select box
that displays all possible records to associate with.
The collection select box supports multiple inputs,
and is augmented with [Selectize].

## Local variables:

- `f`:
  A Rails form generator, used to help create the appropriate input fields.
- `field`:
  An instance of [Administrate::Field::HasMany][1].
  Contains helper methods for displaying a collection select box.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Field/HasMany
[Selectize]: http://brianreavis.github.io/selectize.js
%>

<% if nested = field.options[:nested] %>
  <%= f.fields_for field.attribute, field.data do |has_many_f| %>
    <% nested_form = field.nested_form(has_many_f.object) %>
    <fieldset class="field-unit--nested">
      <legend><%= nested_form.resource_name.titleize %></legend>
      <% nested_form.attributes(params[:action]).each do |attribute| %>
        <div class="field-unit field-unit--<%= attribute.html_class %>">
          <%= render_field attribute, f: has_many_f %>
        </div>
      <% end %>
      <% if nested.is_a?(Hash) && nested[:allow_remove] %>
        <div class="field-unit">
          <div class="field-unit__label">
          </div>
          <div class="field-unit__field">
            <%= link_to '(remove)', '#', class: 'remove' %>
          </div>
        </div>
      <% end %>
    </fieldset>
  <% end %>
<% else %>
  <div class="field-unit__label">
    <%= f.label field.attribute, for: "#{f.object_name}_#{field.attribute_key}" %>
  </div>
  <div class="field-unit__field">
    <%= f.select field.attribute_key, nil, {}, multiple: true do %>
      <%= options_for_select(field.associated_resource_options, field.selected_options) %>
    <% end %>
    <%= content_for :actions %>
  </div>
<% end %>
